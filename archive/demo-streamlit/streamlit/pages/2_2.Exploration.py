from pathlib import Path
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import numpy as np
import pandas as pd
import os
import requests


#IMAGES_ROOT = os.path.join(os.getcwd(), "images")
IMAGES_ROOT = r"https://www.anigraphics.fr/images"


def isFileExist(fileFullPath):
    if fileFullPath is not None:
        if os.path.isfile(fileFullPath):
            if os.path.exists(fileFullPath):
                return True
            else:
                return False
        else:
            return False
    else:
        return False

def get_codes_df():
    cats = {
            '10' : 'Livres anciens / occasion',
            '40' : 'Jeux vid√©os anciens, √©quipement',
            '50' : 'Accessoires & produits d√©riv√©s gaming',
            '60' : 'Consoles de jeu',
            '1140' : 'Figurines',
            '1160' : 'Cartes de jeu',
            '1180' : 'Figurines & Jeux de Soci√©t√©',
            '1280' : 'Jeux & jouets pour enfants',
            '1281' : 'Jeux de soci√©t√©',
            '1300' : 'Mod√©lisme',
            '1301' : 'V√™tements b√©b√© et jeux pour la maison',
            '1302' : 'Jeux & jouets d\'ext√©rieur pour enfants',
            '1320' : 'Jouets & accessoires pour b√©b√©',
            '1560' : 'Meubles d\'int√©rieur',
            '1920' : 'Linge de maison',
            '1940' : 'Alimentation & vaisselle',
            '2060' : 'Objets d√©coration maison',
            '2220' : 'Equipement pour animaux',
            '2280' : 'Journaux, revues, magazines anciens',
            '2403' : 'Livres, BD, magazines anciens',
            '2462' : 'Consoles, jeux et √©quipement occasion',
            '2522' : 'Papeterie',
            '2582' : 'Meubles d\'ext√©rieur',
            '2583' : 'Equipement pour piscine',
            '2585' : 'Outillage int√©rieur / ext√©rieur, t√¢ches m√©nag√®res',
            '2705' : 'Livres neufs',
            '2905' : 'Jeux PC',
        }
    df_codes = pd.DataFrame({'prdtypecode': list(cats.keys()), 'cat√©gorie': list(cats.values())})
    return df_codes
    
def load_data_from_pickle():
    pickles_apth = "../../pickles/cleaned_data.pkl"
    if isFileExist(pickles_apth):
        print("Reading from pickle file from " + f"{pickles_apth} ...")
        df = pd.read_pickle(f"{pickles_apth}")
        df_codes = get_codes_df()
        df_codes['prdtypecode'] = df_codes['prdtypecode'].astype(int)
        df['prdtypecode'] = df['prdtypecode'].astype(int)
        df['productid'] = df['productid'].astype('int64')
        df['imageid'] = df['imageid'].astype('int64')
        df_with_cats = pd.merge(left=df, left_on='prdtypecode', right=df_codes, right_on='prdtypecode' ).sort_values(by='cat√©gorie')
        st.write("dataset charg√©")
        return df_with_cats

    else:
        st.write("Impossible de charger le dataset ! ")
        return None



st.title("Exploration")

df_with_cats = load_data_from_pickle()
if df_with_cats is None:
    st.write("Ouch ! Impossible de charger le dataset √† partir du PICKLE.")

# Configuration de la barre lat√©rale
tabs_title = ["üöÄJeu de donn√©es intial", "üöÄJeu de donn√©es cible", "üöÄExploration int√©ractive des images"]
tab1, tab2, tab3 = st.tabs(tabs_title)
cur_dir = os.getcwd()
st.write(cur_dir)

with tab1:
    # liste des images statiques
    #img_train_set = Image.open(os.path.join(os.getcwd(), "images", "train_set.png"))
    #img_test_set = Image.open(os.path.join(os.getcwd(), "images", "test_set.png"))
    #img_target_set = Image.open(os.path.join(os.getcwd(), "images", "target_set.png"))
    #img_schema_dataset = Image.open(os.path.join(os.getcwd(), "images", "schema_source_dataset.png"))
    
    img_train_set = Image.open(requests.get(IMAGES_ROOT +  "/"  + "train_set.png", stream=True).raw)
    img_test_set = Image.open(requests.get(IMAGES_ROOT +  "/"  + "test_set.png", stream=True).raw)
    img_target_set = Image.open(requests.get(IMAGES_ROOT +  "/"  + "target_set.png", stream=True).raw)
    img_schema_dataset = Image.open(requests.get(IMAGES_ROOT +  "/"  + "schema_source_dataset.png", stream=True).raw)
    
    
    
    st.html("<h3>‚≠ê<span  style='color:orange'>Sch√©ma des jeux de donn√©es d'entra√Ænement et de test :</span></h3>")
    st.image(img_schema_dataset)
    st.html("\
        <ul><li>Deux fichiers CSV, le 1er <strong>X_train_update.csv</strong> est un le jeu de donn√©es d'entra√Ænement et le 2√®me <strong>  X_test_update.csv</strong>est celui de test </li>            \
            <li>Les deux fichiers CSV poss√®dent le m√™me nombre de variables explicatives comme illustr√© ci-dessous</li>        \
            <li>Chaque ligne du CSV r√©f√©rence d'une mani√®re unique le ID du produit et le ID de l'image repr√©sentant le produit</li>        \
        </ul>\
             ")
    
    st.html("<h3>‚≠ê<span  style='color:orange'>Jeu de donn√©es d'entra√Ænement :</span></h3>")
    st.image(image=img_train_set)
    st.write(">Les valeurs manquantes sont uniquement dans la colonne **description** de l'ordre de 35%")
    st.write(">Le taux des designations en doublon reste relativement faible 3%")
    st.write(">Quant au taux des descriptions en doublon de l'ordre de 45% est assez √©lev√© du fait certainement du copier/coller pour les produits dans la m√™me cat√©gorie/univers !")
    
  
    st.write(">Remarque : Le jeu de donn√©es d'entra√Ænement ne contienent pas les donn√©es relatives √† la cible,\
        √† savoir, les **cat√©gories associ√©es aux produits**.")
     
    img_shema_target = Image.open(os.path.join(os.getcwd(), "images", "shema_target.png"))
    st.html("<h3>‚≠ê<span  style='color:orange'>Sch√©ma de la variable √† pr√©dire (cat√©gories associ√©es aux produits) :</span></h3>")
    st.html("<p>La variable cible est form√©e de 27 cat√©gories num√©riques. Une variable traduisant les cat√©gories num√©riques \
        ci-dessous en cat√©gories descirptives sur la base de la combinaison du texte et des images associ√©es aux produits.</p>")
    st.image(img_shema_target)
    
    #st.html("<h3><span  style='color:orange'>List des cat√©gories descriptives :</span></h3>")
    #st.write("On a rajout√© une colonne descriptive de la cible, √† savoir les 27 cat√©gories des produits :")
    #df = get_codes_df()
    #st.dataframe(df)
    
    st.html("<h3>‚≠ê<span  style='color:orange'>Jeu de donn√©es cible (target) pour la partie entra√Ænement</span></h3>")
    st.write("le jeu de donn√©es target de la partie test poss√®de le m√™me sch√©ma que celui d'entra√Ænement.")
    st.write("Dimension du jeu de donn√©es target pour le test : (16453, 1)")
    st.image(img_target_set)
    
    st.html("<h4>‚≠ê<span  style='color:orange'>Dataset cible</span></h4>")
    st.write(">#### Le CSV d'entra√Ænement combin√© avec le CSV de la cible (cat√©gories des produits) sera notre dataset pour la mod√©lisation")
    st.write(">#### Un CSV de test sans les cat√©gories sera uniquement utilis√© lors de tests des mod√®les d√©velopp√©s")
    
with tab2:
    img_datset_cibe = Image.open(os.path.join(os.getcwd(), "images", "datset_cibe.png"))
    st.html("<h3>‚≠ê<span  style='color:orange'>Sch√©ma du jeu de donn√©es cible construit :</span></h3>")
    st.image(img_datset_cibe)
    
    st.html("<span style='font-size: 20px;'>Les deux variables <span style='color:orange'>'designation'</span> et <span style='color:orange'>'description'</span> ont √©t√© conct√©n√©es \
        dans une variable <span style='color:orange'>'desi_desc'</span> qui devient l'unique variable explicative textuelle utilis√©e dans les mod√®les.\
        Le reste des variables explicatives ont √©t√© pr√©serv√©es.</span>")
    
    st.html("<h4>Aper√ßu du jeu de donn√©es augment√©, transform√© et nettoy√©</h4>")
    st.write(">Uniquement la nouvelle colonne **desi_desc** fusion de **designation** et **description** qui est nettoy√©e et consid√©r√©e comme √©tant la variable explicative textuelle.")
    pickles_apth = "../../pickles/cleaned_data.pkl"
    #if isFileExist(pickles_apth):
    #    print("Reading from pickle file from " + f"{pickles_apth} ...")
    #    df = pd.read_pickle(f"{pickles_apth}")
    #    df_codes = get_codes_df()
    #    df_codes['prdtypecode'] = df_codes['prdtypecode'].astype(int)
    #    df['prdtypecode'] = df['prdtypecode'].astype(int)
    #    df['productid'] = df['productid'].astype('int64')
    #    df['imageid'] = df['imageid'].astype('int64')
    #    df_with_cats = pd.merge(left=df, left_on='prdtypecode', right=df_codes, right_on='prdtypecode' ).sort_values(by='cat√©gorie')
    st.write("**Dimension du dataframe :** " + str(df_with_cats.shape))
    st.write(df_with_cats)
    
    
# TAB TExploration intractive des images  
with tab3:
    col2, col3 = st.columns(2)
    
    
    
    #with col1:
    #    st.html("<h4><span  style='color:orange'>Affichage des images par index (ligne)</span></h4>")
    #    st.write("Le dataset √©tant brass√©, deux index qui se suivent ne donnent pas la m√™me cat√©gorie de produit !")
    #    image_index = st.number_input(
    #        "S√©lectionnez un index d'image entre 0 et 82263 et tapez sur ENTREE :", min_value=0, max_value=82263, step =1, value=0, placeholder="tapez un nombre"
    #    )
    #    
    #    if (image_index>=0) and (image_index<82264):
    #        fig = plt.figure(figsize=(7, 7)) 
    #        prod = df_with_cats.iloc[image_index, 0] 
    #        prdid = df_with_cats.iloc[image_index, 2]
    #        imgid = df_with_cats.iloc[image_index, 3]
    #        
    #        #if isFileExist(os.path.join(os.getcwd(), "images/image_train", f"image_{imgid}_product_{prdid}.jpg")):
    #        
    #        # by defaut it's a train image, otherwise open it from test
    #        img = Image.open(requests.get(IMAGES_ROOT +  "/image_train/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw)
    #        if img is None:
    #            img = Image.open(requests.get(IMAGES_ROOT +  "/image_test/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw)
    #            
    #            # img = Image.open(IMAGES_ROOT +  "/image_train/" + f"image_{imgid}_product_{prdid}.jpg")
    #            #img = Image.open(requests.get(IMAGES_ROOT +  "/image_train/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw) 
    #        #else:
    #            #img = Image.open(IMAGES_ROOT +   "/image_test/" + f"image_{imgid}_product_{prdid}.jpg")
    #            #img = Image.open(requests.get(IMAGES_ROOT +  "/image_test/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw)
    #        
    #        # Adds a subplot at the 1st positio 
    #        fig, ax = plt.subplots(1, 1, figsize=(7,7)) 
    #        ax.imshow(img)
    #        ax.set_title(prod)
    #        ax.axis('off') 
    #        st.pyplot(ax.figure)
    #        
    #        st.text("Code de la cat√©gorie :" + str(df_with_cats.iloc[image_index, 4]))
    #        st.text("Cat√©gorie :" + str(df_with_cats.iloc[image_index, 6]))
    
    
    with col2:
        st.html("<h4>‚≠ê<span  style='color:orange'>Affichage al√©atoire des images par cat√©gorie s√©lectionn√©e</span></h4>")    
        st.write("Cette cat√©gorisation est le r√©sultat d'un travail r√©alis√© √† la fois sur des √©chantillons d'images et du texte.")
        list_elements = []
        for cat in np.sort(df_with_cats['cat√©gorie'].unique()):
            list_elements.append(cat)
        option = st.selectbox(
            "S√©lectionnez une cat√©gorie :",
            tuple(list_elements),
        )
        
        #st.text("selected option=" + str(option))
        sel_rows = df_with_cats.loc[df_with_cats['cat√©gorie'] == option]
        idx = np.sort(sel_rows.index)
    
        for i in range(10):
            r = np.random.choice(idx)
            row = df_with_cats.loc[[r]]
            
            # draw 10 randomly selected images
            fig = plt.figure(figsize=(7, 7))
            prod = row['designation']
            prdid = str(int(row['productid']))
            imgid = str(int(row['imageid']))
            code = row['prdtypecode']
            cat = str(row['cat√©gorie'])
            
            #if isFileExist(os.path.join(os.getcwd(), "images/image_train", f"image_{imgid}_product_{prdid}.jpg")):
            #if Image.open(requests.get(IMAGES_ROOT +  "/image_train/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw):    
            #    #img = Image.open(IMAGES_ROOT +  "/image_train/" + f"image_{imgid}_product_{prdid}.jpg")
            #    img = Image.open(requests.get(IMAGES_ROOT +  "/image_train/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw)
            #else:
            #    #img = Image.open(IMAGES_ROOT +  "/image_test/" + f"image_{imgid}_product_{prdid}.jpg")
            #    img = Image.open(requests.get(IMAGES_ROOT +  "/image_test/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw)
            
            img = Image.open(requests.get(IMAGES_ROOT +  "/image_train/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw)
            if img is None:
                img = Image.open(requests.get(IMAGES_ROOT +  "/image_test/"  + f"image_{imgid}_product_{prdid}.jpg", stream=True).raw)
                
            
            # Adds a subplot at the 1st positio 
            fig, ax = plt.subplots(1, 1) 
            ax.imshow(img)
            ax.set_title('Code : ' + str(list(code.values)[0]) + '\n' + prod.values[0])
            ax.axis('off') 
            st.pyplot(ax.figure)
    
    with col3:
        col3.html("<h4>‚≠ê<span  style='color:orange'>Echantillons d'images par code cat√©gorie des produits</span></h4>")
        def drawBtn_2():
            btn_load_images = col3.button("Charger les √©chantillons",  type="primary" )
            if btn_load_images:
                load_images()
                col3.text("Les images ont √©t√© charg√©es !")
            
        def load_images():
            df_codes = get_codes_df()
            for code, cat in zip(df_codes['prdtypecode'], df_codes['cat√©gorie']):
                col3.write("Cat√©gorie : " + cat)
                col3.image(os.path.join(os.getcwd(), "images", "code-" + str(code) + ".png"))
                #st.image(Image.open(requests.get(IMAGES_ROOT + "/code-" + str(code) + ".png", stream=True).raw) )
            
        drawBtn_2()
    